environment:
  global:
    PROJECT_NAME: dca-rs
  matrix:
    - TARGET: i686-pc-windows-gnu
      CHANNEL: stable
    - TARGET: x86_64-pc-windows-gnu
      CHANNEL: stable

install:
  - ps: Start-FileDownload "https://static.rust-lang.org/dist/channel-rust-stable"
  - ps: $env:RUST_VERSION = Get-Content channel-rust-stable | select -first 1 | %{$_.split('-')[1]}
  - if NOT "%CHANNEL%" == "stable" set RUST_VERSION=%CHANNEL%
  - ps: Start-FileDownload "https://static.rust-lang.org/dist/rust-${env:RUST_VERSION}-${env:TARGET}.exe"
  - rust-%RUST_VERSION%-%TARGET%.exe /VERYSILENT /NORESTART /DIR="C:\Program Files (x86)\Rust"
  - SET PATH=%PATH%;C:\Program Files (x86)\Rust\bin
  - if "%TARGET%" == "i686-pc-windows-gnu" set PATH=C:\msys64\mingw32\bin;C:\msys64\usr\bin;%PATH%
  - if "%TARGET%" == "x86_64-pc-windows-gnu" set PATH=C:\msys64\mingw64\bin;C:\msys64\usr\bin;%PATH%
  - rustc -V
  - cargo -V

build: false

test_script:
  - cd cli/
  - rename C:\msys64\mingw32\bin\mingw32-make.exe make.exe
  - rename C:\msys64\mingw64\bin\mingw32-make.exe make.exe
  - cargo build --verbose
  - cargo run
  - cargo test

before_deploy:
  - cd cli/
  - cargo build --release
  - mkdir staging
  - copy target\release\dca-rs.exe staging
  - cd staging
  - 7z a ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%.zip *
  - appveyor PushArtifact ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%.zip

deploy:
  description: 'Windows release'
  artifact: /.*\.zip/
  auth_token:
    secure: tVx3vNbalXpg2U8cFY0BuYZUdolSh9B8UPtz2nOUMNOV2SElZpRKUtWdZ5n9wG7g
  provider: GitHub
  on:
    CHANNEL: stable
    appveyor_repo_tag: true